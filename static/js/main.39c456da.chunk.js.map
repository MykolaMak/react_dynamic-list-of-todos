{"version":3,"sources":["helpers/api.ts","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","App","useState","todos","setTodos","sortedTodos","setSortedTodos","isLoading","setIsLoading","errorMessage","setErrorMessage","isLoaded","setIsLoaded","handleLoadClick","a","usersFromServer","todosFromServer","todosWithUsers","map","todo","user","find","id","userId","className","type","onClick","sortedTodods","sort","b","title","localeCompare","filter","completed","name","key","disabled","ReactDOM","render","document","getElementById"],"mappings":"iSACMA,G,MAAS,SAAIC,GAGjB,OAAOC,MAAM,GAAD,OAFI,mEAEJ,OAAcD,EAAd,UACTE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCiGhBC,EAlGH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTC,EADS,KACFC,EADE,OAEsBF,mBAAiB,IAFvC,mBAETG,EAFS,KAEIC,EAFJ,OAGkBJ,oBAAS,GAH3B,mBAGTK,EAHS,KAGEC,EAHF,OAIwBN,mBAAS,IAJjC,mBAITO,EAJS,KAIKC,EAJL,OAKgBR,oBAAS,GALzB,mBAKTS,EALS,KAKCC,EALD,KAOVC,EAAe,uCAAG,gCAAAC,EAAA,6DACtBN,GAAa,GADS,kBDgBKb,EAAa,SChBlB,cAIdoB,EAJc,gBDiBKpB,EAAa,SCjBlB,OAKdqB,EALc,OAOdC,EAAiBD,EAAgBE,KAAI,SAAAC,GAAI,kCAC1CA,GAD0C,IAE7CC,KAAML,EAAgBM,MAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,eAGtDnB,EAASa,GACTX,EAAeW,GACfL,GAAY,GAdQ,kDAgBpBF,EAAgB,0CAhBI,0DAAH,qDAgDrB,OACE,oCACE,qDACEC,EAYA,oCACE,yBAAKa,UAAU,WACb,4BAAQC,KAAK,SAASC,QA7CZ,WAClB,IAAMC,EAAe,YAAIxB,GAAOyB,MAAK,SAACd,EAAGe,GACvC,OAAOf,EAAEgB,MAAMC,cAAcF,EAAEC,UAGjCxB,EAAeqB,KAwCP,iBACA,4BAAQF,KAAK,SAASC,QAtCR,WACtB,IAAMC,EAAexB,EAAM6B,QAAO,SAAAb,GAAI,OAAIA,EAAKc,aAE/C3B,EAAeqB,KAmCP,kBACA,4BAAQF,KAAK,SAASC,QAjCT,WACrB,IAAMC,EAAe,YAAIxB,GAAOyB,MAAK,SAACd,EAAGe,GACvC,OAAOf,EAAEM,MAAQS,EAAET,KACfN,EAAEM,KAAKc,KAAKH,cAAcF,EAAET,KAAKc,MACjC,KAGN5B,EAAeqB,KA0BP,qBACA,4BAAQF,KAAK,SAASC,QAxBV,WACpBpB,EAAeH,KAuBP,oBAEF,wBAAIqB,UAAU,cACXnB,EAAYa,KAAI,SAAAC,GAAI,OACnB,wBACEgB,IAAKhB,EAAKG,GACVE,UAAWL,EAAKc,UAAY,4BAA8B,mBAE1D,wBAAIT,UAAU,oBAAoBL,EAAKW,OACvC,0BAAMN,UAAU,qBACbL,EAAKC,KACFD,EAAKC,KAAKc,KACV,uBA5Bd,oCACE,4BACET,KAAK,SACLC,QAASb,EACTuB,SAAU7B,GAETA,EAAY,aAAe,QAE9B,uBAAGiB,UAAU,SAASf,MCnEhC4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.39c456da.chunk.js","sourcesContent":["\nconst getAll = <T>(url: string): Promise<T[]> => {\n  const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api/';\n\n  return fetch(`${API_URL}${url}.json`)\n    .then(response => response.json());\n};\n\ninterface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: object;\n  phone: string;\n  website: string;\n  company: object;\n}\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: User;\n}\n\nexport const getUsers = () => (getAll<User>('users'));\nexport const getTodos = () => (getAll<Todo>('todos'));\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getTodos, getUsers, Todo } from './helpers/api';\n\nconst App = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [sortedTodos, setSortedTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const usersFromServer = await getUsers();\n      const todosFromServer = await getTodos();\n\n      const todosWithUsers = todosFromServer.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(user => user.id === todo.userId),\n      }));\n\n      setTodos(todosWithUsers);\n      setSortedTodos(todosWithUsers);\n      setIsLoaded(true);\n    } catch (error) {\n      setErrorMessage('Loading error, please try again later.');\n    }\n  };\n\n  const sortByTitle = () => {\n    const sortedTodods = [...todos].sort((a, b) => {\n      return a.title.localeCompare(b.title);\n    });\n\n    setSortedTodos(sortedTodods);\n  };\n\n  const sortByCompleted = () => {\n    const sortedTodods = todos.filter(todo => todo.completed);\n\n    setSortedTodos(sortedTodods);\n  };\n\n  const sortByUserName = () => {\n    const sortedTodods = [...todos].sort((a, b) => {\n      return a.user && b.user\n        ? a.user.name.localeCompare(b.user.name)\n        : 0;\n    });\n\n    setSortedTodos(sortedTodods);\n  };\n\n  const resetAllTodos = () => {\n    setSortedTodos(todos);\n  };\n\n  return (\n    <>\n      <h1>Dynamic list of TODOs</h1>\n      {!isLoaded ? (\n        <>\n          <button\n            type=\"button\"\n            onClick={handleLoadClick}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n          <p className=\"error\">{errorMessage}</p>\n        </>\n      ) : (\n        <>\n          <div className=\"buttons\">\n            <button type=\"button\" onClick={sortByTitle}>Sort by title</button>\n            <button type=\"button\" onClick={sortByCompleted}>Sort completed</button>\n            <button type=\"button\" onClick={sortByUserName}>Sort by user name</button>\n            <button type=\"button\" onClick={resetAllTodos}>Reset All TODOs</button>\n          </div>\n          <ul className=\"todo__list\">\n            {sortedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={todo.completed ? 'completed todo__list-item' : 'todo__list-item'}\n              >\n                <h3 className=\"todo__list-title\">{todo.title}</h3>\n                <span className=\"todo__list-author\">\n                  {todo.user\n                    ? todo.user.name\n                    : 'Unknown user.'}\n                </span>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}